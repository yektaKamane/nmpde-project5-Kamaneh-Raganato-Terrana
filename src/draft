 
#ifndef FISHER_KOLMOGOROV_HPP
#define FISHER_KOLMOGOROV_HPP
#include <deal.II/base/conditional_ostream.h>
#include <deal.II/base/quadrature_lib.h>
#include <deal.II/distributed/fully_distributed_tria.h>
#include <deal.II/dofs/dof_handler.h>
#include <deal.II/dofs/dof_tools.h>
#include <deal.II/fe/fe_simplex_p.h>
#include <deal.II/fe/fe_system.h>
#include <deal.II/fe/fe_values.h>
#include <deal.II/fe/fe_values_extractors.h>
#include <deal.II/fe/mapping_fe.h>
#include <deal.II/grid/grid_generator.h>
#include <deal.II/grid/grid_in.h>
#include <deal.II/grid/grid_out.h>
#include <deal.II/grid/tria.h>
#include <deal.II/grid/grid_tools.h>
#include <deal.II/distributed/grid_refinement.h>

#include <deal.II/lac/dynamic_sparsity_pattern.h>
#include <deal.II/lac/solver_cg.h>
#include <deal.II/lac/solver_gmres.h> // ...
#include <deal.II/lac/trilinos_precondition.h>
#include <deal.II/lac/trilinos_sparse_matrix.h>
// #include <deal.II/multigrid/multigrid.h> // ...
#include <deal.II/numerics/data_out.h>
#include <deal.II/numerics/matrix_tools.h>
#include <deal.II/numerics/vector_tools.h>
#include <deal.II/base/parameter_handler.h>
#include <fstream>
#include <iostream>
using namespace dealii;
// Class representing the non-linear diffusion problem.
template <int dim>
class FisherKol
{
public:
  // Function for the alpha coefficient.
  class FunctionAlpha : public Function<dim>
  {
  public:
    virtual double
    value(const Point<dim> & /*p*/,
          const unsigned int /*component*/ = 0) const override
    {
      return 1.0;
    }
  };
  
  // Function of the fiber field
  class FunctionN
  {
  public:
    Tensor<2, dim>
    isotropic(const Point<dim> & p) const
    {
      Tensor<2, dim> values;
      for (unsigned int i = 0; i < dim; ++i)
      {
        values[i][i] = 0.0;
      }
      return values;
    }
  };
  // Function of the matrix D
  class FunctionD
  {
  public:
    Tensor<2, dim> matrix_value(const Point<dim> & /*p ,
                   Tensor<2,dim> &values */) const
    {
      Tensor<2, dim> values;
      for (unsigned int i = 0; i < dim; ++i)
      {
        values[i][i] = 1.0;
      }
      // values[1][1] += 10.0;
      return values;
    }
  };
  // Function for the forcing term.
  class ForcingTerm : public Function<dim>
  {
  public:
    virtual double
    value(const Point<dim> & p,
          const unsigned int /*component*/ = 0) const override
    {
      double temp_val = std::cos(M_PI * p[0]) * std::cos(M_PI * p[1]);
      if (dim == 2) 
        // return ((2 * M_PI * M_PI - 1) * temp_val - 2) * std::exp(-this->get_time()) +
        //        (temp_val*temp_val + 3*temp_val + 2)* std::exp(-this->get_time() * 2);
        return -2 * M_PI * M_PI * temp_val * std::exp(-this->get_time()) -
               (temp_val * temp_val + 4 - 4 * temp_val) * std::exp(-this->get_time() * 2);
      if (dim == 3)
        return 0.0;
      else return 0.0;
    }
  };

  // Function for Dirichlet boundary conditions.
  class FunctionG : public Function<dim>
  {
  public:
    // Constructor.
    FunctionG()
    {}
  // class FunctionG : public Function<dim>
  // {
  // public:
  //   // Constructor.
  //   FunctionG()
  //   {}

    virtual double
    value(const Point<dim> & p,
          const unsigned int /*component*/ = 0) const override
    {
      if (p[0]==0 && p[1]>=0 && p[1]<=1)
        return (+std::cos(M_PI * p[1]) + 2) * std::exp(-this->get_time());
      else if (p[0]==1 && p[1]>=0 && p[1]<=1)
        return (-std::cos(M_PI * p[1]) + 2) * std::exp(-this->get_time());
      else if (p[1]==0 && p[0]>=0 && p[0]<=1)
        return (+std::cos(M_PI * p[0]) + 2) * std::exp(-this->get_time());
      else if (p[1]==1 && p[0]>=0 && p[0]<=1)
        return (-std::cos(M_PI * p[0]) + 2) * std::exp(-this->get_time());
  //   virtual double
  //   value(const Point<dim> & p,
  //         const unsigned int /*component*/ = 0) const override
  //   {
  //     if (p[0]==0 && p[1]>=0 && p[1]<=1)
  //       return (+std::cos(M_PI * p[1]) + 2) * std::exp(-this->get_time());
  //     else if (p[0]==1 && p[1]>=0 && p[1]<=1)
  //       return (-std::cos(M_PI * p[1]) + 2) * std::exp(-this->get_time());
  //     else if (p[1]==0 && p[0]>=0 && p[0]<=1)
  //       return (+std::cos(M_PI * p[0]) + 2) * std::exp(-this->get_time());
  //     else if (p[1]==1 && p[0]>=0 && p[0]<=1)
  //       return (-std::cos(M_PI * p[0]) + 2) * std::exp(-this->get_time());

    }
  };
  //   }
  // };

  // class FunctionG0 : public Function<dim>
  // {
  // public:
  //   // Constructor.
  //   FunctionG0()
  //   {}
  //   virtual double
  //   value(const Point<dim> & p,
  //         const unsigned int /*component*/ = 0) const override
  //   {
  //     return (+std::cos(M_PI * p[1]) + 2) * std::exp(-this->get_time());
  //   }
  // };
  // class FunctionG1 : public Function<dim>
  // {
  // public:
  //   // Constructor.
  //   FunctionG1()
  //   {}
  //   virtual double
  //   value(const Point<dim> & p,
  //         const unsigned int /*component*/ = 0) const override
  //   {
  //     return (-std::cos(M_PI * p[1]) + 2) * std::exp(-this->get_time());
  //   }
  // };
  // class FunctionG2 : public Function<dim>
  // {
  // public:
  //   // Constructor.
  //   FunctionG2()
  //   {}
  //   virtual double
  //   value(const Point<dim> & p,
  //         const unsigned int /*component*/ = 0) const override
  //   {
  //     return (+std::cos(M_PI * p[0]) + 2) * std::exp(-this->get_time());
  //   }
  // };
  // class FunctionG3 : public Function<dim>
  // {
  // public:
  //   // Constructor.
  //   FunctionG3()
  //   {}
  //   virtual double
  //   value(const Point<dim> & p,
  //         const unsigned int /*component*/ = 0) const override
  //   {
  //     return (-std::cos(M_PI * p[0]) + 2) * std::exp(-this->get_time());
  //   }
  // };
  // Function for Neumann boundary condition.
  class FunctionH : public Function<dim>
  {
  public:
    // Constructor.
    FunctionH()
    {}
    // Evaluation.
    virtual double
    value(const Point<dim> & /*p*/,
          const unsigned int /*component*/ = 0) const override
    {
      return 0.0;
    }
  };
  // Function for initial conditions.
  class FunctionU0 : public Function<dim>
  {
  public:
    virtual double
    value(const Point<dim> & p,
          const unsigned int /*component*/ = 0) const override
    {
      // if (dim == 2){
      //   if (p[0] < 0.55 && p[0] > 0.45 && p[1] < 0.55 && p[1] > 0.45)
      //     return 0.1;
      // }
      // if (dim == 3){
      //   if (p[0] < 80.0 && p[0] > 70.0 && p[1] < 95.0 && p[1] > 90.0 && p[2] < 50.0 && p[2] > 40.0)
      //     return 0.95;
      // }
      if (dim == 2) {
        return std::cos(M_PI * p[0]) * std::cos(M_PI * p[1]) + 2;
      }
      if (dim == 3) {
        return 0.0;
      }
      return 0.0;
    }
  };
   // Exact solution
  class ExactSolution : public Function<dim>
  {
  public:
    virtual double
    value(const Point<dim> &p,
          const unsigned int /*component*/ = 0) const override
    {
      double temp_val = std::cos(M_PI * p[0]) * std::cos(M_PI * p[1]);
      if (dim == 2) 
        return (temp_val + 2) * std::exp(-this->get_time());
      if (dim == 3)
        return (temp_val * std::cos(M_PI * p[2])) * std::exp(-this->get_time());
      else return 0.0;
      
    }
    virtual Tensor<1, dim>
    gradient(const Point<dim> &p,
             const unsigned int /*component*/ = 0) const override
    {
      Tensor<1, dim> result;
      if (dim == 2)
      {
        result[0] = -M_PI * std::sin(M_PI * p[0]) * std::cos(M_PI * p[1]) *
                    std::exp(-this->get_time());
        result[1] = -M_PI * std::cos(M_PI * p[0]) * std::sin(M_PI * p[1]) *
                    std::exp(-this->get_time());
      }
      
      if (dim == 3)
      {
        result[0] = -M_PI * std::sin(M_PI * p[0]) * std::cos(M_PI * p[1]) *
                    std::cos(M_PI * p[2]) * std::exp(-this->get_time());
        result[1] = -M_PI * std::sin(M_PI * p[1]) * std::cos(M_PI * p[0]) *
                    std::cos(M_PI * p[2]) * std::exp(-this->get_time());
        result[2] = -M_PI * std::sin(M_PI * p[2]) * std::cos(M_PI * p[0]) *
                    std::cos(M_PI * p[1]) * std::exp(-this->get_time());
      }
      return result;
    }
  };
  // Constructor. We provide the final time, time step Delta t and theta method
  // parameter as constructor arguments.
  FisherKol(const std::string  &mesh_file_name_,
                const unsigned int &r_,
                const double       &T_,
                const double       &deltat_,
                const std::string  &prm_file_)
    : mpi_size(Utilities::MPI::n_mpi_processes(MPI_COMM_WORLD))
    , mpi_rank(Utilities::MPI::this_mpi_process(MPI_COMM_WORLD))
    , pcout(std::cout, mpi_rank == 0)
    , T(T_)
    , mesh_file_name(mesh_file_name_)
    , r(r_)
    , deltat(deltat_)
    , prm_file(prm_file_)
    , mesh(MPI_COMM_WORLD)
  {
      parameters.declare_entry("coef_alpha", "1.0", Patterns::Double(), "dummy");
      parameters.declare_entry("coef_dext", "1.0", Patterns::Double(), "dummy");
      parameters.declare_entry("coef_daxn", "1.0", Patterns::Double(), "dummy");
      parameters.declare_entry("coef_daxn", "0.0", Patterns::Double(), "dummy");
      parameters.declare_entry("fib", "0", Patterns::Integer(), "dummy");

      parameters.parse_input(prm_file);
  }
  // Initialization.
  void
  setup();
  // Solve the problem.
  void
  solve();
  // Compute the error for convergence analysis.
  double
  compute_error(const VectorTools::NormType &norm_type);
protected:
  // Assemble the tangent problem.
  void
  assemble_system();
  // Solve the linear system associated to the tangent problem.
  void
  solve_linear_system();
  // Solve the problem for one time step using Newton's method.
  void
  solve_newton();
  // Output.
  void
  output(const unsigned int &time_step) const;
  // MPI parallel. /////////////////////////////////////////////////////////////
  // Number of MPI processes.
  const unsigned int mpi_size;
  // This MPI process.
  const unsigned int mpi_rank;
  // Parallel output stream.
  ConditionalOStream pcout;
  // Problem definition. ///////////////////////////////////////////////////////
  // alpha coefficient.
  FunctionAlpha alpha;
  // ...
  FunctionN fiber;
  // matrix D.
  FunctionD D;
  // Forcing term.
  ForcingTerm forcing_term;

  // Dirichlet boundary conditions.
  FunctionG function_g;
  // FunctionG function_g;
  // FunctionG0 function_g0;
  // FunctionG1 function_g1;
  // FunctionG2 function_g2;
  // FunctionG3 function_g3;
  // Neumann boundary condition.
  FunctionH function_h;
  // Initial conditions.
  FunctionU0 u_0;
  // Exact solution.
  ExactSolution exact_solution;
  // Current time.
  double time;
  // Final time.
  const double T;
  // Discretization. ///////////////////////////////////////////////////////////
  // Mesh file name.
  const std::string mesh_file_name;
  // Polynomial degree.
  const unsigned int r;
  // Time step.
  const double deltat;
  const std::string prm_file;
  ParameterHandler parameters;
  // Mesh.
  parallel::fullydistributed::Triangulation<dim> mesh;
  // Finite element space.
  std::unique_ptr<FiniteElement<dim>> fe;
  // Quadrature formula.
  std::unique_ptr<Quadrature<dim>> quadrature;
  // Quadrature formula used on boundary lines.
  std::unique_ptr<Quadrature<dim - 1>> quadrature_boundary;
  // DoF handler.
  DoFHandler<dim> dof_handler;
  // DoFs owned by current process.
  IndexSet locally_owned_dofs;
  // DoFs relevant to the current process (including ghost DoFs).
  IndexSet locally_relevant_dofs;
  // Jacobian matrix.
  TrilinosWrappers::SparseMatrix jacobian_matrix;
  // Residual vector.
  TrilinosWrappers::MPI::Vector residual_vector;
  // Increment of the solution between Newton iterations.
  TrilinosWrappers::MPI::Vector delta_owned;
  // System solution (without ghost elements).
  TrilinosWrappers::MPI::Vector solution_owned;
  // System solution (including ghost elements).
  TrilinosWrappers::MPI::Vector solution;
  // System solution at previous time step.
  TrilinosWrappers::MPI::Vector solution_old;
};
#endif








#include "Fisher_Kolmogorov_solver_convergence.hpp"
template class FisherKol<2>;
template class FisherKol<3>;
template <int dim>
void FisherKol<dim>::setup()
{
  // Create the mesh.
  {
    pcout << "Initializing the mesh" << std::endl;
    Triangulation<dim> mesh_serial;
    GridIn<dim> grid_in;
    grid_in.attach_triangulation(mesh_serial);
    std::ifstream grid_in_file(mesh_file_name);
    grid_in.read_msh(grid_in_file);
    GridTools::partition_triangulation(mpi_size, mesh_serial);
    const auto construction_data = TriangulationDescription::Utilities::
      create_description_from_triangulation(mesh_serial, MPI_COMM_WORLD);
    mesh.create_triangulation(construction_data);
    pcout << "  Number of elements = " << mesh.n_global_active_cells()
          << std::endl;
  }
  pcout << "-----------------------------------------------" << std::endl;
  // Initialize the finite element space.
  {
    pcout << "Initializing the finite element space" << std::endl;
    fe = std::make_unique<FE_SimplexP<dim>>(r);
    pcout << "  Degree                     = " << fe->degree << std::endl;
    pcout << "  DoFs per cell              = " << fe->dofs_per_cell
          << std::endl;
    quadrature = std::make_unique<QGaussSimplex<dim>>(r + 1);
    pcout << "  Quadrature points per cell = " << quadrature->size()
          << std::endl;
    quadrature_boundary = std::make_unique<QGaussSimplex<dim - 1>>(r + 1);
    std::cout << "  Quadrature points per boundary cell = "
              << quadrature_boundary->size() << std::endl;
  }
  pcout << "-----------------------------------------------" << std::endl;
  // Initialize the DoF handler.
  {
    pcout << "Initializing the DoF handler" << std::endl;
    dof_handler.reinit(mesh);
    dof_handler.distribute_dofs(*fe);
    locally_owned_dofs = dof_handler.locally_owned_dofs();
    DoFTools::extract_locally_relevant_dofs(dof_handler, locally_relevant_dofs);
    pcout << "  Number of DoFs = " << dof_handler.n_dofs() << std::endl;
  }
  pcout << "-----------------------------------------------" << std::endl;
  // Initialize the linear system.
  {
    pcout << "Initializing the linear system" << std::endl;
    pcout << "  Initializing the sparsity pattern" << std::endl;
    TrilinosWrappers::SparsityPattern sparsity(locally_owned_dofs,
                                               MPI_COMM_WORLD);
    DoFTools::make_sparsity_pattern(dof_handler, sparsity);
    sparsity.compress();
    pcout << "  Initializing the matrices" << std::endl;
    jacobian_matrix.reinit(sparsity);
    pcout << "  Initializing the system right-hand side" << std::endl;
    residual_vector.reinit(locally_owned_dofs, MPI_COMM_WORLD);
    pcout << "  Initializing the solution vector" << std::endl;
    solution_owned.reinit(locally_owned_dofs, MPI_COMM_WORLD);
    delta_owned.reinit(locally_owned_dofs, MPI_COMM_WORLD);
    solution.reinit(locally_owned_dofs, locally_relevant_dofs, MPI_COMM_WORLD);
    solution_old = solution;
  }
}
 
template <int dim>
void FisherKol<dim>::assemble_system()
{
  const unsigned int dofs_per_cell = fe->dofs_per_cell;
  const unsigned int n_q           = quadrature->size();
  FEValues<dim> fe_values(*fe,
                          *quadrature,
                          update_values | update_gradients |
                            update_quadrature_points | update_JxW_values);
  // Since we need to compute integrals on the boundary for Neumann conditions,
  // we also need a FEValues object to compute quantities on boundary edges.
  FEFaceValues<dim> fe_values_boundary(*fe,
                                       *quadrature_boundary,
                                       update_values |
                                         update_quadrature_points |
                                         update_JxW_values);
  FullMatrix<double> cell_matrix(dofs_per_cell, dofs_per_cell);
  Vector<double>     cell_residual(dofs_per_cell);
  std::vector<types::global_dof_index> dof_indices(dofs_per_cell);
  jacobian_matrix = 0.0;
  residual_vector = 0.0;
  // Value and gradient of the solution on current cell.
  std::vector<double>         solution_loc(n_q);
  std::vector<Tensor<1, dim>> solution_gradient_loc(n_q);
  // Value of the solution at previous timestep (un) on current cell.
  std::vector<double> solution_old_loc(n_q);
  forcing_term.set_time(time);
  // The coefficients are constant throughout the program
  const double alpha = parameters.get_double("coef_alpha");
  const double d_ext = parameters.get_double("coef_dext");
  const double d_axn = parameters.get_double("coef_daxn");
  Tensor<2, dim> D_matrix;
  for (unsigned int i = 0; i < dim; ++i){
    D_matrix[i][i] = d_ext;
  }
  for (const auto &cell : dof_handler.active_cell_iterators())
    {
      if (!cell->is_locally_owned())
        continue;
      fe_values.reinit(cell);
      cell_matrix   = 0.0;
      cell_residual = 0.0;
      fe_values.get_function_values(solution, solution_loc);
      fe_values.get_function_gradients(solution, solution_gradient_loc);
      fe_values.get_function_values(solution_old, solution_old_loc);
      for (unsigned int q = 0; q < n_q; ++q)
        {
          Tensor<2, dim> temp = fiber.isotropic(fe_values.quadrature_point(q));
          D_matrix += d_axn * temp;
          const double f_loc =
            forcing_term.value(fe_values.quadrature_point(q));
          for (unsigned int i = 0; i < dofs_per_cell; ++i)
            {
              for (unsigned int j = 0; j < dofs_per_cell; ++j)
                {
                  cell_matrix(i, j) += fe_values.shape_value(i, q) *
                               fe_values.shape_value(j, q) / deltat *
                               fe_values.JxW(q);
                  cell_matrix(i, j) -= alpha *
                                      fe_values.shape_value(j, q) *
                                      fe_values.shape_value(i, q) *
                                      fe_values.JxW(q);
                  cell_matrix(i, j) += 2.0 * alpha *
                                      solution_loc[q] *
                                      fe_values.shape_value(j, q) *
                                      fe_values.shape_value(i, q) *
                                      fe_values.JxW(q);
                  const Tensor<1, dim> &grad_phi_i = fe_values.shape_grad(i, q);
                  const Tensor<1, dim> &grad_phi_j = fe_values.shape_grad(j, q);
                  cell_matrix(i, j) += scalar_product(D_matrix * grad_phi_j, grad_phi_i) * fe_values.JxW(q);
                  
          }
              // Assemble the residual vector (with changed sign).
              // Time derivative term.
              cell_residual(i) -= (solution_loc[q] - solution_old_loc[q]) /
                                  deltat * fe_values.shape_value(i, q) *
                                  fe_values.JxW(q);
              // first term.
              cell_residual(i) -=
                    scalar_product( D_matrix * solution_gradient_loc[q],
                               fe_values.shape_grad(i, q)) *
                    fe_values.JxW(q);
              // second term.
              cell_residual(i) += alpha *
                                  solution_loc[q] *
                                  (1.0 - solution_loc[q]) *
                                  fe_values.shape_value(i, q) * 
                                  fe_values.JxW(q);
              // Forcing term.
              cell_residual(i) +=
                f_loc * fe_values.shape_value(i, q) * fe_values.JxW(q);
            }
        }

      // If the cell is adjacent to the boundary we loop over its edges
      // (referred to as faces in the deal.II jargon).
      // if (cell->at_boundary())
      //   {
      //     for (unsigned int face_number = 0; face_number < cell->n_faces();
      //          ++face_number)
      //       {
      //         // If current face lies on the boundary, and its boundary ID (or
      //         // tag) is that of one of the Neumann boundaries, we assemble the
      //         // boundary integral.
      //         if (cell->face(face_number)->at_boundary() &&
      //             (cell->face(face_number)->boundary_id() == 0 ||
      //              cell->face(face_number)->boundary_id() == 1))
      //           {
      //             fe_values_boundary.reinit(cell, face_number);

      //             for (unsigned int q = 0; q < quadrature_boundary->size(); ++q)
      //               for (unsigned int i = 0; i < dofs_per_cell; ++i)
      //                 cell_residual(i) -= function_h.value(fe_values_boundary.quadrature_point(q)) * // h(xq)
      //                                     fe_values_boundary.shape_value(i, q) *                     // v(xq)
      //                                     fe_values_boundary.JxW(q);                                 // Jq wq
      //           }
      //       }
      //   }
      if (cell->at_boundary())
        {
          for (unsigned int face_number = 0; face_number < cell->n_faces();
               ++face_number)
            {
              // If current face lies on the boundary, and its boundary ID (or
              // tag) is that of one of the Neumann boundaries, we assemble the
              // boundary integral.
              if (cell->face(face_number)->at_boundary() &&
                  (cell->face(face_number)->boundary_id() == 0 ||
                   cell->face(face_number)->boundary_id() == 1 ||
                   cell->face(face_number)->boundary_id() == 2 ||
                   cell->face(face_number)->boundary_id() == 3))
                {
                  fe_values_boundary.reinit(cell, face_number);

                  for (unsigned int q = 0; q < quadrature_boundary->size(); ++q)
                    for (unsigned int i = 0; i < dofs_per_cell; ++i)
                      cell_residual(i) -= function_h.value(fe_values_boundary.quadrature_point(q)) * // h(xq)
                                          fe_values_boundary.shape_value(i, q) *                     // v(xq)
                                          fe_values_boundary.JxW(q);                                 // Jq wq
                }
            }
        }

      cell->get_dof_indices(dof_indices);

      jacobian_matrix.add(dof_indices, cell_matrix);
      residual_vector.add(dof_indices, cell_residual);
    }
  jacobian_matrix.compress(VectorOperation::add);
  residual_vector.compress(VectorOperation::add);

  // Dirichlet boundary conditions.
  {
    std::map<types::global_dof_index, double> boundary_values;
  // {
  //   std::map<types::global_dof_index, double> boundary_values;

    std::map<types::boundary_id, const Function<dim> *> boundary_functions;
    // Functions::ZeroFunction<dim>                        zero_function;
  //   std::map<types::boundary_id, const Function<dim> *> boundary_functions;
  //   // Functions::ZeroFunction<dim>                        zero_function;

    boundary_functions[0] = &function_g;
    boundary_functions[1] = &function_g;
    boundary_functions[2] = &function_g;
    boundary_functions[3] = &function_g;
  //   boundary_functions[0] = &function_g;
  //   boundary_functions[1] = &function_g;
  //   boundary_functions[2] = &function_g;
  //   boundary_functions[3] = &function_g;

    VectorTools::interpolate_boundary_values(dof_handler,
                                             boundary_functions,
                                             boundary_values);
  //   VectorTools::interpolate_boundary_values(dof_handler,
  //                                            boundary_functions,
  //                                            boundary_values);

    MatrixTools::apply_boundary_values(
      boundary_values, jacobian_matrix, delta_owned, residual_vector, false);
  }
  //   MatrixTools::apply_boundary_values(
  //     boundary_values, jacobian_matrix, delta_owned, residual_vector, false);
  // }
}

template <int dim>
void FisherKol<dim>::solve_linear_system()
{
  SolverControl solver_control(10000, 1e-12 * residual_vector.l2_norm());
  SolverCG<TrilinosWrappers::MPI::Vector> solver(solver_control);
  TrilinosWrappers::PreconditionAMG        preconditioner;
  preconditioner.initialize(
    jacobian_matrix, TrilinosWrappers::PreconditionAMG::AdditionalData(1.0));
  solver.solve(jacobian_matrix, delta_owned, residual_vector, preconditioner);
  pcout << "  " << solver_control.last_step() << " CG iterations" << std::endl;
}
template <int dim>
void FisherKol<dim>::solve_newton()
{
  const unsigned int n_max_iters        = 1000;
  const double       residual_tolerance = 1e-3;
  unsigned int n_iter        = 0;
  double       residual_norm = residual_tolerance + 1;

  // We apply the boundary conditions to the initial guess (which is stored in
  // solution_owned and solution).
  {
    IndexSet dirichlet_dofs = DoFTools::extract_boundary_dofs(dof_handler);
    dirichlet_dofs          = dirichlet_dofs & dof_handler.locally_owned_dofs();

    function_g.set_time(time);

    TrilinosWrappers::MPI::Vector vector_dirichlet(solution_owned);
    VectorTools::interpolate(dof_handler, function_g, vector_dirichlet);

    for (const auto &idx : dirichlet_dofs)
      solution_owned[idx] = vector_dirichlet[idx];

    solution_owned.compress(VectorOperation::insert);
    solution = solution_owned;
  }
  // {
  //   IndexSet neumann_dofs = DoFTools::extract_boundary_dofs(dof_handler);
  //   neumann_dofs          = neumann_dofs & dof_handler.locally_owned_dofs();
  //   IndexSet dirichlet_dofs = DoFTools::extract_boundary_dofs(dof_handler);
  //   dirichlet_dofs          = dirichlet_dofs & dof_handler.locally_owned_dofs();

  //   function_h.set_time(time);
  //   function_g.set_time(time);

  //   TrilinosWrappers::MPI::Vector vector_neumann(solution_owned);
  //   VectorTools::interpolate(dof_handler, function_h, vector_neumann);
  //   TrilinosWrappers::MPI::Vector vector_dirichlet(solution_owned);
  //   VectorTools::interpolate(dof_handler, function_g, vector_dirichlet);

  //   for (const auto &idx : neumann_dofs)
  //     solution_owned[idx] = vector_neumann[idx];
  //   for (const auto &idx : dirichlet_dofs)
  //     solution_owned[idx] = vector_dirichlet[idx];

  //   solution_owned.compress(VectorOperation::insert);
  //   solution = solution_owned;
  // }
  {
    IndexSet neumann_dofs = DoFTools::extract_boundary_dofs(dof_handler);
    neumann_dofs          = neumann_dofs & dof_handler.locally_owned_dofs();

    function_h.set_time(time);

    TrilinosWrappers::MPI::Vector vector_neumann(solution_owned);
    VectorTools::interpolate(dof_handler, function_h, vector_neumann);

    for (const auto &idx : neumann_dofs)
      solution_owned[idx] = vector_neumann[idx];

    solution_owned.compress(VectorOperation::insert);
    solution = solution_owned;
  }

  while (n_iter < n_max_iters && residual_norm > residual_tolerance)
    {
      assemble_system();
      residual_norm = residual_vector.l2_norm();
      pcout << "  Newton iteration " << n_iter << "/" << n_max_iters
            << " - ||r|| = " << std::scientific << std::setprecision(6)
            << residual_norm << std::flush;
      // We actually solve the system only if the residual is larger than the
      // tolerance.
      if (residual_norm > residual_tolerance)
        {
          // Step 1 of the Newton method.
          solve_linear_system();
          // Step 2 of the Newton method.
          solution_owned += delta_owned;
          solution = solution_owned;
        }
      else
        {
          pcout << " < tolerance" << std::endl;
        }
      ++n_iter;
    }
}
template <int dim>
void FisherKol<dim>::output(const unsigned int &time_step) const
{
  DataOut<dim> data_out;
  data_out.add_data_vector(dof_handler, solution, "u");
  std::vector<unsigned int> partition_int(mesh.n_active_cells());
  GridTools::get_subdomain_association(mesh, partition_int);
  const Vector<double> partitioning(partition_int.begin(), partition_int.end());
  data_out.add_data_vector(partitioning, "partitioning");
  data_out.build_patches();
  data_out.write_vtu_with_pvtu_record(
    "./", "output", time_step, MPI_COMM_WORLD, 3);
}
template <int dim>
void FisherKol<dim>::solve()
{
  pcout << "===============================================" << std::endl;
  time = 0.0;
  // Apply the initial condition.
  {
    pcout << "Applying the initial condition" << std::endl;
    VectorTools::interpolate(dof_handler, u_0, solution_owned);
    solution = solution_owned;
    // Output the initial solution.
    output(0);
    pcout << "-----------------------------------------------" << std::endl;
  }
  unsigned int time_step = 0;
  while (time < T - 0.5 * deltat)
    {
      time += deltat;
      ++time_step;
      // Store the old solution, so that it is available for assembly.
      solution_old = solution;
      pcout << "n = " << std::setw(3) << time_step << ", t = " << std::setw(5)
            << std::fixed << time << std::endl;
      // At every time step, we invoke Newton's method to solve the non-linear
      // problem.
      solve_newton();
      output(time_step);
      pcout << std::endl;
    }
}
template <int dim>
double FisherKol<dim>::compute_error(const VectorTools::NormType &norm_type)
{
  FE_SimplexP<dim> fe_linear(1);
  MappingFE mapping(fe_linear);
  const QGaussSimplex<dim> quadrature_error = QGaussSimplex<dim>(r + 2);
  exact_solution.set_time(time);
  Vector<double> error_per_cell;
  VectorTools::integrate_difference(mapping,
                                    dof_handler,
                                    solution,
                                    exact_solution,
                                    error_per_cell,
                                    quadrature_error,
                                    norm_type);
  const double error =
      VectorTools::compute_global_error(mesh, error_per_cell, norm_type);
  return error;
}

